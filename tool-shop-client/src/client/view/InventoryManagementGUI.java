package client.view;

import javax.swing.*;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.WindowListener;

/**
 * Represents the Inventory Management GUI for interfacing with the user. Contains user code for
 * setting listeners and text fields as well as code generated by Intellij GUI Designer.
 */
public class InventoryManagementGUI {
    private JPanel inventoryManagementPanel;
    private JPanel buttonPanel;
    private JButton loadAllToolsButton;
    private JButton searchByNameButton;
    private JButton searchByIDButton;
    private JPanel resultsPanel;
    private JList<String> inventoryResultsList;
    private JButton decreaseQuantityButton;
    private JScrollPane inventoryScrollPane;
    private JTextField quantityTextField;
    private JButton viewOrderButton;
    private JFrame frame;

    private boolean inventoryLoaded;

    public InventoryManagementGUI() {
        frame = new JFrame("CustomerManagementGUI");
        frame.setContentPane(this.inventoryManagementPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        inventoryLoaded = false;
        setButtonsClickable(false);
    }

    public void close() {
        frame.dispose();
    }

    public boolean isInventoryLoaded() {
        return inventoryLoaded;
    }

    public void setInventoryLoaded(boolean condition) {
        inventoryLoaded = condition;
        setButtonsClickable(condition);
    }

    public void setButtonsClickable(boolean condition) {
        searchByIDButton.setEnabled(condition);
        searchByNameButton.setEnabled(condition);
        viewOrderButton.setEnabled(condition);
        decreaseQuantityButton.setEnabled(condition);
    }

    public void addWindowListener(WindowListener listener) {
        frame.addWindowListener(listener);
    }

    public void addLoadAllToolsListener(ActionListener listener) {
        loadAllToolsButton.addActionListener(listener);
    }

    public void addSearchByNameListener(ActionListener listener) {
        searchByNameButton.addActionListener(listener);
    }

    public void addSearchByIdListener(ActionListener listener) {
        searchByIDButton.addActionListener(listener);
    }

    public void addInventoryResultsListener(ListSelectionListener listener) {
        ListSelectionModel listSelectionModel = inventoryResultsList.getSelectionModel();
        listSelectionModel.addListSelectionListener(listener);
    }

    public void addDecreaseQuantityListener(ActionListener listener) {
        decreaseQuantityButton.addActionListener(listener);
    }

    public void addViewOrderListener(ActionListener listener) {
        viewOrderButton.addActionListener(listener);
    }

    public void clearSearchResults() {
        ((DefaultListModel<String>) inventoryResultsList.getModel()).clear();
    }

    public void addToolSearchResult(String searchResult) {
        ((DefaultListModel<String>) inventoryResultsList.getModel()).addElement(searchResult);
    }

    public String getSearchResultSelected() {
        return String.valueOf(inventoryResultsList.getSelectedValue());
    }

    public String getQuantityValue() {
        return quantityTextField.getText();
    }

    public void setQuantityValue(String quantityString) {
        quantityTextField.setText(quantityString);
    }

    public void displayMessage(String message) {
        JOptionPane.showMessageDialog(inventoryManagementPanel, message);
    }

    public String promptForInput(String prompt) {
        return JOptionPane.showInputDialog(prompt);
    }

    public static void main(String[] args) {
        InventoryManagementGUI gui = new InventoryManagementGUI();
        gui.setQuantityValue("10");
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        inventoryManagementPanel = new JPanel();
        inventoryManagementPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JSplitPane splitPane1 = new JSplitPane();
        inventoryManagementPanel.add(splitPane1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        splitPane1.setLeftComponent(buttonPanel);
        loadAllToolsButton = new JButton();
        loadAllToolsButton.setText("Load All Tools");
        buttonPanel.add(loadAllToolsButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        searchByNameButton = new JButton();
        searchByNameButton.setText("Search by Name");
        buttonPanel.add(searchByNameButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        searchByIDButton = new JButton();
        searchByIDButton.setText("Search by ID");
        buttonPanel.add(searchByIDButton, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        buttonPanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        viewOrderButton = new JButton();
        viewOrderButton.setText("View Order");
        buttonPanel.add(viewOrderButton, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        resultsPanel = new JPanel();
        resultsPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        splitPane1.setRightComponent(resultsPanel);
        inventoryScrollPane = new JScrollPane();
        resultsPanel.add(inventoryScrollPane, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        inventoryResultsList = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        inventoryResultsList.setModel(defaultListModel1);
        inventoryResultsList.setSelectionMode(0);
        inventoryScrollPane.setViewportView(inventoryResultsList);
        final JLabel label1 = new JLabel();
        label1.setText("Tool List:");
        resultsPanel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        resultsPanel.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        resultsPanel.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Current Quantity:");
        panel1.add(label2, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        quantityTextField = new JTextField();
        quantityTextField.setEditable(false);
        Font quantityTextFieldFont = this.$$$getFont$$$(null, Font.BOLD, -1, quantityTextField.getFont());
        if (quantityTextFieldFont != null) {
            quantityTextField.setFont(quantityTextFieldFont);
        }
        quantityTextField.setText("0");
        panel1.add(quantityTextField, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(40, -1), null, 0, false));
        decreaseQuantityButton = new JButton();
        decreaseQuantityButton.setText("Decrease Quantity");
        panel1.add(decreaseQuantityButton, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer3, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, new Dimension(100, -1), null, null, 0, false));
        final JLabel label3 = new JLabel();
        Font label3Font = this.$$$getFont$$$(null, -1, 20, label3.getFont());
        if (label3Font != null) {
            label3.setFont(label3Font);
        }
        label3.setText("Inventory Management Menu");
        inventoryManagementPanel.add(label3, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) {
            return null;
        }
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        }
        else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            }
            else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return inventoryManagementPanel;
    }

}
