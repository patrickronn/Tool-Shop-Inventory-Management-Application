package messagemodel;

import java.util.Map;

/**
 * Represents an electrical item which has attributes specific to electrical tools.
 *
 * @author Patrick Linang
 * @since November 26, 2020
 */
public class ElectricalItem extends Item {
    /**
     * Description of the power type requirements for an electrical tool.
     */
    private String powerType;

    /**
     * Constructs an ElectricalItem which includes info about the item's power type.
     *
     * The supplier of the object remains null and can be assigned afterwards.
     *
     * @param id a unique ID as an integer
     * @param name String name of the item
     * @param quantity current item stock available as an integer
     * @param price price of an item (Example format: '12.43')
     * @param powerType some description about power requirements for the item (e.g. "150 W")
     */
    public ElectricalItem(int id, String name, int quantity, double price, int supplierId, String powerType) {
        super(id, name, quantity, price, supplierId, "Electrical");
        setPowerType(powerType);
    }

    /**
     * Appends the additional key-value pair for power type into the map generated by superclass.
     * @return a Map containing the electrical item's attributes as key-value pairs
     */
    public Map<String, String> toMap() {
        Map<String, String> map = super.toMap();
        map.put("powerType", powerType);
        return map;
    }

    /**
     * Getter method.
     * @return power type information
     */
    public String getPowerType() {
        return powerType;
    }

    /**
     * Setter method.
     * @param powerType description of the power type requirements.
     */
    public void setPowerType(String powerType) {
        this.powerType = powerType;
    }

    /**
     * Overrides superclass toString() representation to append power type information in the string.
     * @return a String representation of the electrical item's info
     */
    @Override
    public String toString() {
        String priceFormatted = String.format("%.2f", price);
        return id + ", " + name + ", " + type + ", " + powerType + ", $" + priceFormatted;
    }
}
